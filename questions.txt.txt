1. Describe Kubelet.

Kubelet - 
	* Primary node agent that runs on each node in K cluster.
	* Works in terms of Podspecs.
	* A podspec is a YAML or JSON object that describes a pod.
	* Kubelet receies podspec through API server
	API Server ---> podspecs ---> Kubelet.
	
	* Kubelet ensures that containers described in the podspecs are running and healthy.
	
Additional ways that Kubelet get podspecs

	1. File - --pod-manifest-path switch can be used to pass a path containing pods to run on startup. This path is rechecked every 20 sec ( configurable with a flag)
	2. HTTP endpoint - HTTP endpoint passed as a parameter on the command line. ( checked every 20 secs ( configurable))
	3. HTTP Server - The Kubelet can also listen for HTTP manifest posts.
	
2. How to stop all cluster components in Kubernetes? And remove cluster state?

Ans :
	1. Kill all process using kill command.
	
		sudo kill -SIGINT $(pidof kube-apiserver kubelet etcd)
	
	2. Before you restart your cluster, clear the kube-apiserver cluster state by removing etcd backing store.
	
		$rm -RF ~/default.etcd/
		
	3. Kubelet also caches its state on disk.   You can eliminate Kubelet's cached state by stopping kubelet and then removing the kubelet's backing store as well.
	
		$ sudo rm -RF /var/lib/kubelet
	** This is a good remedy for components that will not restart due to preexisting state that is out of synch with the rest of the cluster
	
	4. Recheck all of the Kubernetes services are stopped.
	
		$ pidof etcd kube-apiserver kubelet
	
	
	5. In addition to K8s components, we need to clean up what Docker is currently running.
	
		$ docker container rm $(docker container stop $(docker container ls -qa ))
		

3. How do you start Kubelet using files.

	* When you run the kubelet you can supply a single manifest file ( or several in a directory ) as a command line argument.  
	* On kubelet startup these manifests will start prior to the manifests supplied by the API server.
	  If no kube-apiserver is supplied the kubelet will simply run these manifests independently.
	  
	  
	 Syntax :
	 
	 --pod-manifest-path=""  - path to the pod spec file or directory of files
	 --file-check-frequency=20s  - duration between checking config files or new data.
	 
	 
4. Kubelet & HTTP Server.

The Kubelet has its own REST API and can be run as a standalone server when appropriate.  You can request information including pod details --/pods  and overall node status -- /healthz

The REST endpoint on the kubelet is enabled by default but you can disable it with the --enable-server=false (switch)	 


5. What is Kubelet backoff time ?

When container fails , the kubelet checks the backoff time and if it has expired the kubelet tries to recreate the container.  The back off ensures that the kubelet will not try to restart the container more than once in the backoff time window.

6. Explain about Schedular?

Kubernetes Schedular significantly effects placement of pods.

Kubernetes schedular is a 
		* Policy-rch
		* Topology aware
		* workload-specific
		
		function that significantly impacts 
		
				--> availability
				--> performance
				--> capacity.
				
Schedular needs to take account
	
		--> Individual and collective resource requirements.
		--> quality of service requirements
		--> hardware/softare/policy constraints
		--> affinity and anti-affinity specifications
		--> data locality
		--> inter-workload interference
		--> deadlines
		
Workload specific requirements will be exposed through the API as necessary.


7. Tell me about how the leader election takes place in Kubernetes schedular?

Note that while many API servers can run in parallel ( etcd ensures state is always consistent) only one schedular may run within the cluster to avoid scheduling conflicts.

For this reason - the schedular causes an election using etcd to determine which of the possibly several schedulars running will become the leader.  All other schedulars simply monitor the leader for failure.  If the leader fails , the remaining schedulars elect an new leader.

===========================
Services
===========================
8. How the Deployment objects and replicaset were created?

Deployments --> create --> ReplicaSets --> Create --> replicas.


9. Why do need replicas?

The reason we have replicas is for scale and HA ( ie., to ensure that failure of one replica does not cause failure of the whole).


10.  Why does service concept came ?

We want to access web pages from any one of the pod , we don't care which pod serves the page.  Even one/more pods fails other pods should be available to service the requests.

That means we can access to the "service" without being tied to the pod that implements it.

In Kubernetes "Services" provide a layer of abstration on the top of a set of Pod replicas implementing the service. 

Services objects identify the pods that implement them using a lable selector. 


11. What is template hash ?

Each pod you create in Kubernetes cotains a template hash.  

This alows you to identify the template that was used to create the pod and to detect pods that are not implementing the current template.

Example:

user@nodea $ kubectl describe pod nginx-deployment-17137908-4w4q2 | grep -iA1 labels
Labels: 	app=nginx
            pod-template-ash=17137908
			

12. How does network hierarchy for "Services" looks like?

Host IP address where VM ware images are running

example :  

	187.192.63.13


NAT network------------------- which has subnet of 10.2.0.0/16

allocates VM images  lets say nodea has ip of 10.2.0.4  and nodeb has ip of 10.2.0.5

and Docker installation in those two vm ware machines has different docker network.

where docker network start of 172.17.0.2  and 172.17.0.3  etc.,   which nodeb also can have same address. 


13. What are the different ways you can configure Kubernetes cluster ?


There are many ways to configure networking in Kubernetes Cluster.

The simplest way is to statically configure each node in the cluster with a unique docker0 subnet and then to set routes in every node to all of the other node docker subnets.


14. What is SDN ?

Software defined networking ( SDN ) technology is an approch to cloud computing that facilitates network management and enables programmatically efficient network configuration in order to improve network performance and monitoring.




15. What is VIP ?

The Kubernetes service is created by the API server and is the VIP for the API server, allowing any pod in the cluster to easily lookup and call the API server.


16.  From there Kube API server allocates VIP for the "Service" ?

When we start Kube API server we provide below flag to it.

--service-cluster-ip-range=10.0.0.0/16

This range is the pool of IPs that the clusterIP pulls for service IPs. Often this IP is called VIP  ( virtual IP), Cluster IP or just IP.

** This range must not overlap with your nodes subnet. 

We have below networks.

--> Nodes or VM machine network
    10.2.0.0/16
	
--> docker0 container network  Or Pod subnet 
	172.17.0.0/16
	
--> service-cluster-ip-range  or Service subnet
	10.0.0.0/16
	
	
==========
Note: Virtual IP are not connected with real listening end points, rather they are hardware/softare table enties that redirect traffic some where else.  

In Kubernetes the process responsible for creating the rules on every node to redirect VIP traffic is the "Kube Proxy".
===========

17. What is Kube-controller-manager ?

--> It supports sernvices.
--> gives ability to to scale the number of containers implementing our services.

--> kcm takes care of deploying and scaling pods.

18.  Kube-proxy responsible for?

** Kube-proxy performs the functions necessary to create services.



-----------------------------------

18. What are the similarities between schedular and replication controller?

Like the schedular, there can only be one active replication controller in a cluster.   Anytime a new replication controller starts it forces an election. Given that this is the first controller manager it becomes the leader and will actively begin managing Deployments, replicaSets and replication controllers.


19. What are the resources that control manager look after ?

v1 - replicationController.
v1beta1 
	- DaemonSet
	- Job
	- Deployment
	- ReplicaSet
	- HorizontalPodAutoscaler
	- StatefulSet
	
20. How do you see system events.

$ kubectl get events

21. Describe Deployment -> flow?

1. ControlManager--> looks for Deployment objects 
-> Creates replicasets
--> Creates two pods from the template 

 and submit them to cluster.  

2. Schedular is exclusively responsible for scheduling pods to Kubelets when pods are not pinned to a particular host.


3. As soon as the Pods are scheduled, the Kublets begin pulling images and launching Pods.  

4. When the pods are up the ReplicaSet reports sucessful Pod creation and when all Pods are up , the deployment reports successful scaling.

22. List pods , ReplicaSets and deployment?

$ kubectl get deployments, replicasets,pods



23. Describe pod naming convention created using deployment object?

example :

nginx-deployment-17137908-4w4q2

<nameMentionedInYaml>-<pod-template-hash>-<podHash>
nginx-deployment        17137908           4w4q2



24. What is uses of pod template hash?

This allows you to identify the template that was used to create the pod and to detect pods that are not implementing the current template.


25. Describe Service attributes?

apiVersion
kind
metadata:
	name: nsvc
spec:
	ports:
		- port:2000
		  targetPort:80
		  
selector:
	app: nginx
	
$ kubectl get services

$ kubectl describe service nsvc

26. 
		




	












	